import { useState } from "react";
import JSZip from "jszip";
import Navbar from "../components/Navbar";
import Footer from "../components/Footer";
import UnlockWrapper from "../components/UnlockWrapper";

export default function DevTools() {
  // Bot builder
  const [botName, setBotName] = useState("NightBot");
  const [runtime, setRuntime] = useState("node"); // node or python
  const [commands, setCommands] = useState([
    { cmd: "/start", reply: "Welcome to NightBot!" },
    { cmd: "/help", reply: "Here are the commands: /start, /help, /status, /ping" },
    { cmd: "/status", reply: "Bot is running smoothly." },
    { cmd: "/ping", reply: "Pong!" },
  ]);

  // Code modifier
  const [codeIn, setCodeIn] = useState("// paste code here");
  const [changeReq, setChangeReq] = useState("");
  const [codeOut, setCodeOut] = useState("");

  // Bot Cloner
  const [cloneNote, setCloneNote] = useState("");
  const [cloneFile, setCloneFile] = useState(null);

  // Add command
  function addCommand() {
    setCommands([...commands, { cmd: "", reply: "" }]);
  }

  // Escape regex
  function escapeForRegex(s) {
    return s.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  }

  // Generate bot code
  function genBotCode() {
    if (runtime === "node") {
      return `// ${botName} - NightForge Generated Node.js Bot
require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const bot = new TelegramBot(process.env.BOT_TOKEN || 'YOUR_TOKEN', { polling: true });

bot.on('polling_error', (err) => console.error('Polling error:', err));
console.log("${botName} starting...");

// Commands
${commands
  .map(
    (c) =>
      `bot.onText(/${escapeForRegex(c.cmd)}/, (msg) => {
  bot.sendMessage(msg.chat.id, \`${c.reply}\`);
});`
  )
  .join("\n\n")}

// Inline example
bot.onText(/\\/inline/, (msg) => {
  bot.sendMessage(msg.chat.id, 'Click a button', {
    reply_markup: { inline_keyboard: [[{ text: 'Hello', callback_data: 'hello' }]] },
  });
});

bot.on('callback_query', (query) => {
  bot.sendMessage(query.message.chat.id, \`You clicked: \${query.data}\`);
});

console.log("${botName} running...");`;
    } else {
      return `# ${botName} - NightForge Generated Python Bot
import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

logging.basicConfig(level=logging.INFO)
bot = Bot(token=os.getenv("BOT_TOKEN") or "YOUR_TOKEN")
dp = Dispatcher(bot)

# Commands
${commands
  .map(
    (c) => `@dp.message_handler(commands=["${c.cmd.replace("/", "")}"])
async def cmd_${c.cmd.replace("/", "")}(message: types.Message):
    await message.reply("${c.reply}")`
  )
  .join("\n\n")}

# Inline example
@dp.message_handler(commands=["inline"])
async def inline_example(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("Hello", callback_data="hello")
    keyboard.add(button)
    await message.reply("Click a button", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: True)
async def process_callback(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, f"You clicked: {callback_query.data}")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
`;
    }
  }

  // Apply code modification
  function applyModification() {
    const header = "// Modified by NightForge: " + (changeReq || "Minor fix");
    setCodeOut(header + "\n" + codeIn + "\n\n// NOTE: manual review required.");
  }

  // Build bot ZIP
  async function buildBotZip() {
    if (!botName) return alert("Set a bot name");
    const zip = new JSZip();
    zip.file("README.md", `# ${botName}\n\nGenerated by NightForge.\n\nReplace YOUR_TOKEN with your bot token in .env\n`);
    zip.file(runtime === "node" ? "bot.js" : "bot.py", genBotCode());
    zip.file("commands.json", JSON.stringify(commands, null, 2));
    if (cloneFile) {
      zip.file(cloneFile.name, await cloneFile.arrayBuffer());
    }

    const blob = await zip.generateAsync({ type: "blob" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = `${botName}_NightForge.zip`;
    link.click();
  }

  return (
    <>
      <Navbar />
      <UnlockWrapper>
        <main style={{ maxWidth: 1100, margin: "20px auto", padding: 20 }}>
          <h1 style={{ color: "var(--accent)" }}>ðŸ’€ Dev Tools â€” NightForge</h1>

          {/* BOT BUILDER */}
          <section style={{ marginBottom: 24, border: "1px solid #111", padding: 16, borderRadius: 12, background: "#0c0c12" }}>
            <h3 style={{ color: "var(--neon)" }}>ðŸ¤– Telegram Bot Builder</h3>
            <label>Bot Name
              <input value={botName} onChange={(e) => setBotName(e.target.value)} style={{ width: "100%", marginTop: 4 }} />
            </label>
            <label>Runtime
              <select value={runtime} onChange={(e) => setRuntime(e.target.value)} style={{ width: "100%", marginTop: 4 }}>
                <option value="node">Node.js</option>
                <option value="python">Python</option>
              </select>
            </label>

            <div style={{ marginTop: 12 }}>
              <strong>Commands</strong>
              {commands.map((c, i) => (
                <div key={i} style={{ display: "flex", gap: 8, marginTop: 8 }}>
                  <input value={c.cmd} placeholder="/cmd" onChange={(e) => { const arr = [...commands]; arr[i].cmd = e.target.value; setCommands(arr); }} />
                  <input value={c.reply} placeholder="Reply text" onChange={(e) => { const arr = [...commands]; arr[i].reply = e.target.value; setCommands(arr); }} />
                </div>
              ))}
              <button onClick={addCommand} style={{ marginTop: 8 }}>+ Add Command</button>
            </div>

            <div style={{ marginTop: 12 }}>
              <h4 style={{ color: "var(--neon)" }}>Generated Code</h4>
              <pre style={{ background: "#050507", padding: 12, borderRadius: 8, overflow: "auto" }}>{genBotCode()}</pre>
            </div>

            <button onClick={buildBotZip} className="btn-primary" style={{ marginTop: 12 }}>ðŸ’¾ Download Bot ZIP</button>
          </section>

          {/* CODE MODIFIER */}
          <section style={{ marginBottom: 24, border: "1px solid #111", padding: 16, borderRadius: 12, background: "#0c0c12" }}>
            <h3 style={{ color: "var(--neon)" }}>ðŸ›  Code Modifier</h3>
            <textarea rows={8} style={{ width: "100%", background: "#050507", color: "#cfe", padding: 8 }} value={codeIn} onChange={e => setCodeIn(e.target.value)} />
            <input placeholder="Describe change (e.g. 'add /status command')" value={changeReq} onChange={e => setChangeReq(e.target.value)} style={{ width: "100%", marginTop: 4 }} />
            <button className="btn-primary" onClick={applyModification} style={{ marginTop: 8 }}>Apply Modifier</button>
            {codeOut && <pre style={{ background: "#020203", padding: 12, marginTop: 8 }}>{codeOut}</pre>}
          </section>

          {/* BOT CLONER */}
          <section style={{ marginBottom: 24, border: "1px solid #111", padding: 16, borderRadius: 12, background: "#0c0c12" }}>
            <h3 style={{ color: "var(--neon)" }}>ðŸ“¦ Bot Cloner</h3>
            <p style={{ color: "var(--muted)" }}>Upload a bot ZIP â€” NightForge will repackage it with README and placeholders.</p>
            <input type="file" accept=".zip" onChange={e => { setCloneFile(e.target.files[0]); setCloneNote(`Uploaded: ${e.target.files[0].name}`); }} />
            <p style={{ color: "var(--neon)" }}>{cloneNote}</p>
          </section>

          <p style={{ color: "var(--muted)", marginTop: 16 }}>Deploy Guides are included in ZIP when available. Always keep tokens secret.</p>
        </main>
      </UnlockWrapper>
      <Footer />
    </>
  );
}
